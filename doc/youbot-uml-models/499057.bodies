class JointTrajectoryController
!!!958705.cpp!!!	JointTrajectoryController()
    this->ISum = 0;
    this->DDiff = 0;
    this->PParameter = 20.0;
    this->IParameter = 10;
    this->DParameter = 50;
    this->last_pose_diff = 0;
    this->ISum_clipping = 1000;
    this->pose_diff_clipping = 65535;
    this->isControllerActive = false;
		this->controllerUpdatesPerSecond = 1000;
		this->targetPosition = 0;
		this->trajectoryPositionsBuffer1InUse = false;
		this->trajectoryPositionsBuffer2InUse = false;
!!!972401.cpp!!!	getConfigurationParameter(out parameter : PParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.setParameter(this->PParameter);
!!!972529.cpp!!!	setConfigurationParameter(in parameter : PParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.getParameter(this->PParameter);
!!!977265.cpp!!!	getConfigurationParameter(out parameter : IParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.setParameter(this->IParameter);
!!!977649.cpp!!!	setConfigurationParameter(in parameter : IParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.getParameter(this->IParameter);
!!!977393.cpp!!!	getConfigurationParameter(out parameter : DParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.setParameter(this->DParameter);
!!!977777.cpp!!!	setConfigurationParameter(in parameter : DParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.getParameter(this->DParameter);
!!!977521.cpp!!!	getConfigurationParameter(out parameter : IClippingParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.setParameter(this->ISum_clipping);
!!!977905.cpp!!!	setConfigurationParameter(in parameter : IClippingParameterTrajectoryControl) : void
  if(this->isControllerActive)
    throw JointParameterException("The trajectory controller is running");
  parameter.getParameter(this->ISum_clipping);
!!!958961.cpp!!!	setTrajectoryPositions(in targetPositions : std::list<int32>) : void

		int buffer1size = 0;
		int buffer2size = 0;
		{
			boost::mutex::scoped_lock dataMutex1(trajectoryPositionsBuffer1Mutex);
			buffer1size = this->trajectoryPositionsBuffer1.size();
		}
		{
			boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer2Mutex);
			buffer2size = this->trajectoryPositionsBuffer1.size();
		}

		if (trajectoryPositionsBuffer1InUse == false && buffer1size == 0) {
			{
				boost::mutex::scoped_lock dataMutex1(trajectoryPositionsBuffer1Mutex);
				this->trajectoryPositionsBuffer1 = targetPositions;
				this->isControllerActive = true;
			}
		} else if (trajectoryPositionsBuffer2InUse == false && buffer2size == 0) {
			{
				boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer2Mutex);
				this->trajectoryPositionsBuffer2 = targetPositions;
				this->isControllerActive = true;
			}

		} else {
			LOG(error) << "Could not set the trajectory!";
		}
!!!984945.cpp!!!	cancelCurrentTrajectory() : void
   if (trajectoryPositionsBuffer1InUse == true) {
      {
        boost::mutex::scoped_lock dataMutex1(trajectoryPositionsBuffer1Mutex);
        this->trajectoryPositionsBuffer1.clear();

      }
    } else if (trajectoryPositionsBuffer2InUse == true) {
      {
        boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer2Mutex);
        this->trajectoryPositionsBuffer2.clear();
      }

    } else {
      LOG(error) << "Could not cancel the trajectory!";
    }
!!!978161.cpp!!!	isTrajectoryControllerActive() : bool
  return this->isControllerActive;
!!!959089.cpp!!!	updateTrajectoryController(in actual : SlaveMessageInput, out velocity : SlaveMessageOutput) : bool

		{
			boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer1Mutex);

			if (!trajectoryPositionsBuffer1.empty() && !trajectoryPositionsBuffer1InUse && !trajectoryPositionsBuffer2InUse) {
				trajectoryPositionsBuffer1InUse = true;
			}

			if (!trajectoryPositionsBuffer1.empty() && trajectoryPositionsBuffer1InUse) {
				{
					boost::mutex::scoped_lock dataMutex(targetPositionMutex);
					targetPosition = (trajectoryPositionsBuffer1).front();
				}
				(trajectoryPositionsBuffer1).pop_front();
			} else {
				trajectoryPositionsBuffer1InUse = false;
			}
		}
		{
			boost::mutex::scoped_lock dataMutex2(trajectoryPositionsBuffer2Mutex);
			if (!trajectoryPositionsBuffer2.empty() && !trajectoryPositionsBuffer1InUse && !trajectoryPositionsBuffer2InUse) {
				trajectoryPositionsBuffer2InUse = true;
			}

			if (!trajectoryPositionsBuffer2.empty() && trajectoryPositionsBuffer2InUse) {
				{
					boost::mutex::scoped_lock dataMutex(targetPositionMutex);
					targetPosition = (trajectoryPositionsBuffer2).front();
				}
				(trajectoryPositionsBuffer2).pop_front();
			} else {
				trajectoryPositionsBuffer2InUse = false;
			}
		}
    
    
    if(!trajectoryPositionsBuffer1InUse && !trajectoryPositionsBuffer2InUse){
      this->isControllerActive = false;
      return false;
    }
      
   
  ///////////////////////// Controller
  
    int32 pose_diff;
		{
			boost::mutex::scoped_lock dataMutex(targetPositionMutex);
			pose_diff =  targetPosition - actual.actualPosition;
		}

    if(pose_diff > pose_diff_clipping)
      pose_diff = pose_diff_clipping;
    
    if(pose_diff < -pose_diff_clipping)
      pose_diff = -pose_diff_clipping;
    

    this->ISum = this->ISum + pose_diff;
    
    if(ISum > ISum_clipping)
      ISum = ISum_clipping;
    
    if(ISum < -ISum_clipping)
      ISum = -ISum_clipping;
      
      
    this->DDiff = this->last_pose_diff - pose_diff;
    velocity.value = ((this->PParameter/256.0) * pose_diff) + ((this->IParameter/65536.0)* this->ISum) + ((this->DParameter/256.0) * this->DDiff);
    this->last_pose_diff =  pose_diff;
    
    velocity.controllerMode = VELOCITY_CONTROL;
  //  printf("pose_target: %10d  pose_diff: %10d   velout: %10d\n",targetPosition, pose_diff, velocity.value);
    
    this->isControllerActive = true;
    return true;
!!!978289.cpp!!!	getLastTargetPosition(out position : JointEncoderSetpoint) : void
  {
      boost::mutex::scoped_lock dataMutex(targetPositionMutex);
      position.encoderTicks = targetPosition;
  }
!!!999665.cpp!!!	getControllerUpdatesPerSecond() : uint
	return this->controllerUpdatesPerSecond;
!!!999793.cpp!!!	setControllerUpdatesPerSecond(in updates : uint) : void
	this->controllerUpdatesPerSecond = updates;
