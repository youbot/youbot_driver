class ErrorAndStatus
!!!518001.cpp!!!	ErrorAndStatus()
    this->name = "ErrorAndStatus";
    this->parameterType = MOTOR_CONTOLLER_PARAMETER;
!!!518257.cpp!!!	getParameter(out parameter : uint) : void
    parameter = this->value;
    this->parseYouBotErrorFlags();
!!!650609.cpp!!!	toString(out value : std::string) : void
  std::stringstream ss;
  ss << this->name << ": " << this->value;
  value  = ss.str();
!!!518385.cpp!!!	getYouBotMailboxMsg(out message : YouBotSlaveMailboxMsg, in msgType : TMCLCommandNumber, in storage : YouBotJointStorage) : void
    message.stctOutput.commandNumber = msgType;
    message.stctOutput.moduleAddress = DRIVE;
    message.stctOutput.typeNumber = 156; //ErrorAndStatus
 //   message.stctOutput.value = value;

!!!518513.cpp!!!	setYouBotMailboxMsg(in message : YouBotSlaveMailboxMsg, in storage : YouBotJointStorage) : void
    if (message.stctOutput.commandNumber == message.stctInput.commandNumber && message.stctInput.status == NO_ERROR) {
      this->value = message.stctInput.value;
    }
!!!518897.cpp!!!	parseYouBotErrorFlags() : void
   // std::stringstream errorMessageStream;
   // errorMessageStream << "Joint " << this->jointNumber << " ";
    std::string errorMessage;
   // errorMessage = errorMessageStream.str();


    if (value & OVER_CURRENT) {
      LOG(warning) << errorMessage << "over current";
      //    throw JointErrorException(errorMessage + "got over current");
    }

    if (value & UNDER_VOLTAGE) {
      LOG(warning) << errorMessage << "under voltage";
      //    throw JointErrorException(errorMessage + "got under voltage");
    }

    if (value & OVER_VOLTAGE) {
      LOG(warning) << errorMessage << "over voltage";
      //   throw JointErrorException(errorMessage + "got over voltage");
    }

    if (value & OVER_TEMPERATURE) {
      LOG(warning) << errorMessage << "over temperature";
      //   throw JointErrorException(errorMessage + "got over temperature");
    }

    if (value & MOTOR_HALTED) {
      LOG(info) << errorMessage << "is halted";
      //   throw JointErrorException(errorMessage + "is halted");
    }

    if (value & HALL_SENSOR_ERROR) {
      LOG(warning) << errorMessage << "hall sensor problem";
      //   throw JointErrorException(errorMessage + "got hall sensor problem");
    }

//    if (value & PWM_MODE_ACTIVE) {
//      LOG(info) << errorMessage << "PWM mode active";
      //   throw JointErrorException(errorMessage + "the cycle time is violated");
//    }

    if (value & VELOCITY_MODE) {
      LOG(info) << errorMessage << "velocity mode active";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (value & POSITION_MODE) {
      LOG(info) << errorMessage << "position mode active";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (value & TORQUE_MODE) {
      LOG(info) << errorMessage << "torque mode active";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (value & POSITION_REACHED) {
      LOG(info) << errorMessage << "position reached";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (value & INITIALIZED) {
      LOG(info) << errorMessage << "is initialized";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (value & TIMEOUT) {
      LOG(warning) << errorMessage << "timeout";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

    if (value & I2T_EXCEEDED) {
      LOG(warning) << errorMessage << "I2t exceeded";
      //   throw JointErrorException(errorMessage + "need to initialize the sinus commutation");
    }

