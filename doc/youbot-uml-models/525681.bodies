class JointLimitMonitor
!!!1026929.cpp!!!	JointLimitMonitor(in jointParameters : YouBotJointStorage, in jointAcceleration : quantity<angular_acceleration>)
	this->storage = jointParameters;
	this->acceleration = jointAcceleration.value();  // rad/s^2
	brakingDistance = 0;
	isbraking = false;
	velocityWhenReachedLimit = 0;
					


!!!1027185.cpp!!!	JointLimitMonitor(in source : JointLimitMonitor)
	this->storage = source.storage;
!!!1027313.cpp!!!	operator=(in source : JointLimitMonitor) : JointLimitMonitor
	this->storage = source.storage;
	return *this;
!!!1027441.cpp!!!	checkLimitsPositionControl(in setpoint : quantity<plane_angle>) : void
	if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of zero is not allowed");
    }
    
    if (storage.encoderTicksPerRound == 0) {
      throw std::out_of_range("Zero Encoder Ticks per Round are not allowed");
    }
    if(storage.areLimitsActive){

      quantity<plane_angle> lowLimit = ((double) this->storage.lowerLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      quantity<plane_angle> upLimit = ((double) this->storage.upperLimit / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      
      if (storage.inverseMovementDirection) {
        upLimit = ((double) -(this->storage.lowerLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
        lowLimit = ((double) -(this->storage.upperLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;
      }
      

      if (!((setpoint < upLimit) && (setpoint > lowLimit))) {
        std::stringstream errorMessageStream;
        errorMessageStream << "The setpoint angle for joint "<< this->storage.jointName <<" is out of range. The valid range is between " << lowLimit << " and " << upLimit << " and it is: " << setpoint;
        throw std::out_of_range(errorMessageStream.str());
      }
    }
!!!1027953.cpp!!!	checkLimitsEncoderPosition(in setpoint : signed int) : void
	if(storage.areLimitsActive){
      if (!((setpoint < this->storage.upperLimit) && (setpoint > this->storage.lowerLimit))) {
        std::stringstream errorMessageStream;
        errorMessageStream << "The setpoint angle for joint "<< this->storage.jointName <<" is out of range. The valid range is between " << this->storage.lowerLimit << " and " << this->storage.upperLimit << " and it is: " << setpoint;
        throw std::out_of_range(errorMessageStream.str());
      }
    }
!!!1034993.cpp!!!	checkLimitsProcessData(in messageInput : SlaveMessageInput, out messageOutput : SlaveMessageOutput) : void
    switch (messageOutput.controllerMode) {
      case POSITION_CONTROL:
        break;
      case VELOCITY_CONTROL:
        if (isbraking == false) {
          calculateBrakingDistance(messageInput);
        }

        if ((messageInput.actualPosition < bevorLowerLimit && !(messageOutput.value > 0)) || (messageInput.actualPosition > bevorUpperLimit && !(messageOutput.value < 0))) {
          //	messageOutput.value = velocityWhenReachedLimit * this->calculateDamping(messageInput.actualPosition);
          messageOutput.value = this->calculateBrakingVelocity(messageInput.actualPosition);
          isbraking = true;
        } else {
          isbraking = false;
        }

        break;
      case CURRENT_MODE:
        break; //disable limit checker for current mode
        /*
        if(isbraking == false){
          calculateBrakingDistance(messageInput);
        }
					
        if( (messageInput.actualPosition < bevorLowerLimit && !(messageOutput.value > 0)) || (messageInput.actualPosition > bevorUpperLimit && !(messageOutput.value < 0))) {
          messageOutput.value = this->calculateBrakingVelocity(messageInput.actualPosition);
          messageOutput.controllerMode = VELOCITY_CONTROL;
          isbraking = true;
        }else{
          isbraking = false;
        }

        break;
         */
      default:

        break;

    }
    
!!!1028081.cpp!!!	calculateDamping(in actualPosition : int) : double
	if(actualPosition <= storage.lowerLimit){
		return 0.0;
	}
	if(actualPosition >= storage.upperLimit){
		return 0.0;
	}
	if(actualPosition < bevorLowerLimit){
		return abs(((double)(actualPosition - storage.lowerLimit))/(bevorLowerLimit - storage.lowerLimit));
	}
	if(actualPosition > bevorUpperLimit){
		return abs(((double)(storage.upperLimit - actualPosition))/(storage.upperLimit - bevorUpperLimit));
	}
	return 0.0;
	
!!!1041521.cpp!!!	calculateBrakingDistance(in messageInput : SlaveMessageInput) : void
		actualVelocityRPS = (((double) messageInput.actualVelocity / 60.0) * storage.gearRatio * 2.0 * M_PI); // radian_per_second;

		brakingDistance = abs((((actualVelocityRPS * actualVelocityRPS) / (2.0 * acceleration)) * ((double) storage.encoderTicksPerRound / (2.0 * M_PI))) / storage.gearRatio);

		bevorLowerLimit = storage.lowerLimit + brakingDistance;
		bevorUpperLimit = storage.upperLimit - brakingDistance;
		velocityWhenReachedLimit = messageInput.actualVelocity;
!!!1041649.cpp!!!	calculateBrakingVelocity(in actualPosition : int) : int
	if(actualPosition <= storage.lowerLimit){
		return 0;
	}
	if(actualPosition >= storage.upperLimit){
		return 0;
	}
	if(actualPosition < bevorLowerLimit){
		distanceToLimit = ((double) (actualPosition - storage.lowerLimit) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI);
		newVelocity =  -sqrt(2.0*acceleration* distanceToLimit);
		return round((newVelocity / (storage.gearRatio * 2.0 * M_PI)) * 60.0);
	}
	if(actualPosition > bevorUpperLimit){
		distanceToLimit = ((double) (storage.upperLimit - actualPosition) / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI);
		newVelocity =  sqrt(2.0*acceleration* distanceToLimit);
		return round((newVelocity / (storage.gearRatio * 2.0 * M_PI)) * 60.0);
	}
	return 0;
	
