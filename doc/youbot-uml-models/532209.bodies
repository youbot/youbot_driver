class TargetPositionReached
!!!1048177.cpp!!!	TargetPositionReached()
    this->name = "TargetPositionReached";
    this->parameterType = MOTOR_CONTOLLER_PARAMETER;
!!!1048433.cpp!!!	getParameter(out parameter : bool) : void
    parameter = this->value;
!!!1048689.cpp!!!	toString(out value : std::string) : void
  std::stringstream ss;
  ss << this->name << ": " << this->value;
  value  = ss.str();
!!!1048817.cpp!!!	getYouBotMailboxMsg(out message : YouBotSlaveMailboxMsg) : void
    message.stctOutput.typeNumber = 8;  //TargetPositionReached
    if(value)
      message.stctOutput.value = 1;
    else
      message.stctOutput.value = 0;
!!!1048945.cpp!!!	setYouBotMailboxMsg(in message : YouBotSlaveMailboxMsg) : void
    this->value = message.stctInput.value;
!!!1049073.cpp!!!	getName() : string
  this->angularVelocity = value;
!!!1049201.cpp!!!	getType() : ParameterType
    //YouBotSlaveMsg messageBuffer;
		if(!ethercatMaster->isEtherCATConnectionEstablished()){
			throw EtherCATConnectionException("No EtherCAT connection");
		}
	
    ethercatMaster->getMsgBuffer(this->storage.jointNumber, messageBuffer);
    this->parseYouBotErrorFlags(messageBuffer);

    if (storage.gearRatio == 0) {
      throw std::out_of_range("A Gear Ratio of zero is not allowed");
    }
    if (storage.encoderTicksPerRound == 0) {
      throw std::out_of_range("Zero Encoder Ticks per Round are not allowed");
    }
    //  LOG(trace) << "enc: " << messageBuffer.stctInput.actualPosition;
    data.angle = ((double) messageBuffer.stctInput.targetPosition / storage.encoderTicksPerRound) * storage.gearRatio * (2.0 * M_PI) * radian;

    if (storage.inverseMovementDirection) {
      data.angle = -data.angle;
    }
