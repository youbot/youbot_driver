class YouBotGripperBar
!!!918385.cpp!!!	YouBotGripperBar(in barNo : uint, in jointNo : uint, in configFilePath : std::string = "../config/")
    this->jointNumber = jointNo;
    this->mailboxMsgRetries = 200;
    this->timeTillNextMailboxUpdate = 1; //ms
    this->barNo = barNo;
    this->maxTravelDistance = 0.0115 * meter;
    this->maxEncoderValue = 67000;
    this->barSpacingOffset = 0 * meter;

    ethercatMaster = &(EthercatMaster::getInstance("youbot-ethercat.cfg", configFilePath));
!!!401009.cpp!!!	setConfigurationParameter(in parameter : MaxEncoderValue) : void
    this->maxEncoderValue = parameter.value;
!!!882801.cpp!!!	getConfigurationParameter(out parameter : MaxEncoderValue) : void
    parameter.value = this->maxEncoderValue;
!!!882673.cpp!!!	getConfigurationParameter(out parameter : MaxTravelDistance) : void
    parameter.value = this->maxTravelDistance;
!!!400881.cpp!!!	setConfigurationParameter(in parameter : MaxTravelDistance) : void
    this->maxTravelDistance = parameter.value;
!!!399473.cpp!!!	setConfigurationParameter(in parameter : BarSpacingOffset) : void
    this->barSpacingOffset = parameter.value;
!!!882545.cpp!!!	getConfigurationParameter(out parameter : BarSpacingOffset) : void
    parameter.value = this->barSpacingOffset;
!!!1090161.cpp!!!	setConfigurationParameter(in parameter : GripperBarName) : void
    this->name = parameter.value;
!!!1090033.cpp!!!	getConfigurationParameter(out parameter : GripperBarName) : void
    parameter.value = this->name;
!!!919025.cpp!!!	getConfigurationParameter(out parameter : YouBotGripperParameter) : void
  
  if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message);
      message.stctOutput.commandNumber = GAP;
      message.stctOutput.moduleAddress = GRIPPER;
      message.stctOutput.motorNumber = this->barNo;
      message.parameterName = parameter.getName();
      
      if (retrieveValueFromMotorContoller(message)) {
        parameter.setYouBotMailboxMsg(message);
      } else {
        throw JointParameterException("Unable to get parameter: " + parameter.getName() + " from the gripper");
      }
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of the gripper");
    }
!!!919153.cpp!!!	setConfigurationParameter(in parameter : YouBotGripperParameter) : void
   if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message);
      message.stctOutput.commandNumber = SAP;
      message.stctOutput.moduleAddress = GRIPPER;
      message.stctOutput.motorNumber = this->barNo;
      message.parameterName = parameter.getName();
      
      if (!setValueToMotorContoller(message)) {
        throw JointParameterException("Unable to set parameter: " + parameter.getName() + " to the gripper");
      }
    }else{
      throw JointParameterException("Parameter " + parameter.getName() + " is not a motor controller parameter of the gripper");
    }
!!!920177.cpp!!!	getConfigurationParameter(inout parameter : YouBotSlaveMailboxMsg) : void
  if (!retrieveValueFromMotorContoller(parameter)) {
     throw JointParameterException("Unable to get parameter from the gripper");
   }
   this->parseMailboxStatusFlags(parameter);
!!!920817.cpp!!!	setData(in encoderSetpoint : GripperBarEncoderSetpoint) : void
    YouBotSlaveMailboxMsg message;
    message.stctOutput.moduleAddress = GRIPPER;
    message.stctOutput.commandNumber = MVP;
    message.stctOutput.typeNumber = 0; //move gripper absolute
    message.stctOutput.motorNumber = this->barNo;
    message.stctOutput.value = encoderSetpoint.barEncoder * -1;

    setValueToMotorContoller(message);
    
!!!921073.cpp!!!	getData(out barVelocity : GripperSensedVelocity) : void
   YouBotSlaveMailboxMsg message;
    message.stctOutput.moduleAddress = GRIPPER;
    message.stctOutput.commandNumber = GAP; 
    message.stctOutput.typeNumber = 3; //actual velocity
    message.stctOutput.value = 0;
    
    message.stctOutput.motorNumber = this->barNo;

    retrieveValueFromMotorContoller(message);
    //std::cout << message.stctInput.value << std::endl;
    
    barVelocity.barVelocity = message.stctInput.value;

    
!!!1020273.cpp!!!	getData(out barPosition : GripperSensedBarPosition) : void
    int valueBar = 0;
    ActualPosition actualPoseBar;
    this->getConfigurationParameter(actualPoseBar);
    actualPoseBar.getParameter(valueBar);

    barPosition.barPosition = (((double) valueBar / this->maxEncoderValue) * this->maxTravelDistance) + this->barSpacingOffset;

!!!1020401.cpp!!!	setData(out barPosition : GripperBarPositionSetPoint) : void

    if (barPosition.barPosition > (this->maxTravelDistance + this->barSpacingOffset) || barPosition.barPosition < this->barSpacingOffset) {
      std::stringstream errorMessageStream;
      errorMessageStream << "The bar position is not allowed to be less than "<< this->barSpacingOffset <<" or higher than " << (this->maxTravelDistance + this->barSpacingOffset) << ". You set " << barPosition.barPosition;
      throw std::out_of_range(errorMessageStream.str());
    }

    quantity<si::length> setpoint;;
    setpoint = (barPosition.barPosition - this->barSpacingOffset);
    
    GripperBarEncoderSetpoint setpointBar;
    setpointBar.barEncoder = setpoint / this->maxTravelDistance * this->maxEncoderValue;
    this->setData(setpointBar);

!!!1064177.cpp!!!	parseGripperErrorFlags(in errosFlags : unsigned int) : void
    if (errosFlags & STALL_GUARD_STATUS) {
  //    LOG(warning) << "Gripper " << "stallguard2 threshold reached";
    }
    if (errosFlags & GRIPPER_OVER_TEMPERATURE) {
      LOG(error) << "Gripper " << "over temperature";
    }
    if (errosFlags & PRE_WARNING_OVER_TEMPERATURE) {
      LOG(warning) << "Gripper " << "pre warning over temperature";
    }
    if (errosFlags & SHORT_TO_GROUND_A) {
      LOG(error) << "Gripper " << "short to ground A";
    }
    if (errosFlags & SHORT_TO_GROUND_B) {
      LOG(error) << "Gripper " << "short to ground B";
    }
    if (errosFlags & OPEN_LOAD_A) {
      LOG(warning) << "Gripper " << "open load A";
    }
    if (errosFlags & OPEN_LOAD_B) {
      LOG(warning) << "Gripper " << "open load B";
    }
    if (errosFlags & STAND_STILL) {
 //     LOG(info) << "Gripper " << "stand still";
    }
    if ( !(errosFlags & STAND_STILL) && (errosFlags & STALL_GUARD_STATUS) ) {
      LOG(info) << "Gripper " << "motor stall";
    }
!!!921201.cpp!!!	parseMailboxStatusFlags(in mailboxMsg : YouBotSlaveMailboxMsg) : void
    std::stringstream errorMessageStream;
    errorMessageStream << "Joint " << this->jointNumber << ": ";
    std::string errorMessage;
    errorMessage = errorMessageStream.str();


    switch(mailboxMsg.stctInput.status){
      case NO_ERROR:
        break;
      case INVALID_COMMAND:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << "; Command no: " << mailboxMsg.stctOutput.commandNumber << " is an invalid command!" ;
      //    throw JointParameterException(errorMessage + "invalid command");
        break;
      case WRONG_TYPE:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << " has a wrong type!";
      //    throw JointParameterException(errorMessage + "wrong type");
        break;
      case INVALID_VALUE:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << " Value: " << mailboxMsg.stctOutput.value << " is a invalid value!";
      //    throw JointParameterException(errorMessage + "invalid value");
        break;
      case CONFIGURATION_EEPROM_LOCKED:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << " Configuration EEPROM locked";
      //    throw JointParameterException(errorMessage + "configuration EEPROM locked");
        break;
      case COMMAND_NOT_AVAILABLE:
        LOG(error) << errorMessage << "Parameter name: " << mailboxMsg.parameterName << "; Command no: " << mailboxMsg.stctOutput.commandNumber << "Command is not available!";
      //    throw JointParameterException(errorMessage + "command not available");
        break;
    }
   

!!!921329.cpp!!!	setValueToMotorContoller(in mailboxMsg : YouBotSlaveMailboxMsg) : bool

    YouBotSlaveMailboxMsg mailboxMsgBuffer;
    mailboxMsgBuffer = mailboxMsg;
    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber);
//    LOG(trace) << "set Output CommandNumber " << (int) mailboxMsgBuffer.stctOutput.commandNumber
//                  << " moduleAddress " << (int) mailboxMsgBuffer.stctOutput.moduleAddress
//                  << " motorNumber " << (int) mailboxMsgBuffer.stctOutput.motorNumber
//                  << " typeNumber " << (int) mailboxMsgBuffer.stctOutput.typeNumber
//                  << " value " << mailboxMsgBuffer.stctOutput.value;

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
          
       
      if (ethercatMaster->getMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber) &&
          mailboxMsgBuffer.stctInput.status == NO_ERROR) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
//      LOG(trace) << "set Input CommandNumber " << (int) mailboxMsgBuffer.stctInput.commandNumber
//                  << " moduleAddress " << (int) mailboxMsgBuffer.stctInput.moduleAddress
//                  << " replyAddress " << (int) mailboxMsgBuffer.stctInput.replyAddress
//                  << " status " << (int) mailboxMsgBuffer.stctInput.status
//                  << " value " << mailboxMsgBuffer.stctInput.value;
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(mailboxMsgBuffer);
      return false;
    } else {
      return true;
    }

!!!921457.cpp!!!	retrieveValueFromMotorContoller(out message : YouBotSlaveMailboxMsg) : bool

    bool unvalid = true;
    unsigned int retry = 0;

    ethercatMaster->setMailboxMsgBuffer(message, this->jointNumber);
//     LOG(trace) << "get Output CommandNumber " << (int) message.stctOutput.commandNumber
//                  << " moduleAddress " << (int) message.stctOutput.moduleAddress
//                  << " motorNumber " << (int) message.stctOutput.motorNumber
//                  << " typeNumber " << (int) message.stctOutput.typeNumber
//                  << " value " << message.stctOutput.value
//                  << " No " << this->jointNumber;

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
         
       
      if (ethercatMaster->getMailboxMsgBuffer(message, this->jointNumber) &&
          message.stctInput.status == NO_ERROR) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
//      LOG(trace) << "get input CommandNumber " << (int) message.stctInput.commandNumber
//                 << " moduleAddress " << (int) message.stctInput.moduleAddress
//                 << " replyAddress " << (int) message.stctInput.replyAddress
//                 << " status " << (int) message.stctInput.status
//                 << " value " << message.stctInput.value
//                 << " No " << this->jointNumber;
         
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      this->parseMailboxStatusFlags(message);
      return false;
    } else {
      return true;
    }

